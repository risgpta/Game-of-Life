{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","LEN","WIDE","useState","cells","Array","i","fill","array","colored","setColored","loop","setLoop","useEffect","time","setInterval","startLife","clearInterval","checkBorder","j","getLiveNeighbourCells","temp","c","k","l","temp2","length","liveCells","onClick","life","Math","floor","random","populate","clearPopulation","className","map","style","display","ck","backgroundColor","temp_colored","handleColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a74fe23.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const LEN = 50;\n  const WIDE = 100;\n  const array = () => {\n    let cells = new Array(LEN);\n    for (let i = 0; i < LEN; i++) {\n      cells[i] = new Array(WIDE).fill(0);\n    }\n    return cells;\n  };\n\n  const [colored, setColored] = useState(array());\n  const [loop, setLoop] = useState(false);\n  useEffect(() => {\n    let time;\n    if (loop) {\n      time = setInterval(() => {\n        startLife();\n      }, 150);\n    }\n    return () => clearInterval(time);\n  }, [loop, colored]);\n\n  const handleColor = (i, j) => {\n    let temp_colored = new Array(LEN);\n    for (let i = 0; i < LEN; i++) {\n      temp_colored[i] = new Array(WIDE).fill(0);\n    }\n\n    for (let i = 0; i < colored.length; i++) {\n      for (let j = 0; j < colored[i].length; j++)\n        temp_colored[i][j] = colored[i][j];\n    }\n    temp_colored[i][j] = 1 - temp_colored[i][j];\n    setColored(temp_colored);\n  };\n\n  const checkBorder = (i, j) => {\n    if (i >= 0 && i < LEN && j >= 0 && j < WIDE) {\n      return true;\n    }\n    return false;\n  };\n\n  const getLiveNeighbourCells = (temp, i, j) => {\n    let c = 0;\n    for (let k = i - 1; k <= i + 1; k++) {\n      for (let l = j - 1; l <= j + 1; l++) {\n        if (k === i && l === j) {\n          continue;\n        }\n        if (checkBorder(k, l) && temp[k][l] === 1) {\n          c++;\n        }\n      }\n    }\n    return c;\n  };\n\n  const startLife = () => {\n    let temp = new Array(LEN);\n    for (let i = 0; i < LEN; i++) {\n      temp[i] = new Array(WIDE).fill(0);\n    }\n\n    let temp2 = new Array(LEN);\n    for (let i = 0; i < LEN; i++) {\n      temp2[i] = new Array(WIDE).fill(0);\n    }\n\n    for (let i = 0; i < colored.length; i++) {\n      for (let j = 0; j < colored[i].length; j++) temp[i][j] = colored[i][j];\n    }\n\n    for (let i = 0; i < colored.length; i++) {\n      for (let j = 0; j < colored[i].length; j++) {\n        let liveCells = getLiveNeighbourCells(temp, i, j);\n        temp2[i][j] = temp[i][j];\n        if ((liveCells < 2 || liveCells > 3) && temp[i][j] === 1) {\n          temp2[i][j] = 0;\n        }\n        if (liveCells === 3 && temp[i][j] === 0) {\n          temp2[i][j] = 1;\n        }\n      }\n    }\n    setColored(temp2);\n  };\n\n  const populate = () => {\n    let temp = new Array(LEN);\n    for (let i = 0; i < LEN; i++) {\n      temp[i] = new Array(WIDE).fill(0);\n    }\n\n    for (let i = 0; i < colored.length; i++) {\n      for (let j = 0; j < colored[i].length; j++) {\n        let life = Math.floor(Math.random() * 100);\n        temp[i][j] = life > 90 ? 1 : 0;\n      }\n    }\n    setColored(temp);\n    setLoop(false);\n  };\n\n  const clearPopulation = () => {\n    let temp = new Array(LEN);\n    for (let i = 0; i < LEN; i++) {\n      temp[i] = new Array(WIDE).fill(0);\n    }\n\n    for (let i = 0; i < colored.length; i++) {\n      for (let j = 0; j < colored[i].length; j++) {\n        temp[i][j] = 0;\n      }\n    }\n    setColored(temp);\n    setLoop(false);\n  };\n\n  return (\n    <div>\n      <button onClick={() => startLife()}>Next generation!</button>\n      <button onClick={() => populate()}>Generate random Population</button>\n      <button onClick={() => setLoop(!loop)}>\n        {!loop ? \"Loop over next generation!\" : \"Stop Loop\"}\n      </button>\n      <button onClick={() => clearPopulation()}>Remove all population</button>\n      <div className=\"App\">\n        <div>\n          {colored.map((c, i) => (\n            <div key={i} style={{ display: \"flex\" }}>\n              {c.map((ck, j) => (\n                <div\n                  className=\"cell\"\n                  key={j}\n                  style={\n                    colored[i][j] === 1 ? { backgroundColor: \"#ffffff\" } : {}\n                  }\n                  onClick={() => handleColor(i, j)}\n                ></div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}